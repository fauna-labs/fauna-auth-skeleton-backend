CreateFunction({
  "name": "request_password_reset",
  "body": Query(Lambda(["email"], If(Exists(Match(Index("accounts_by_email"), Var("email"))), Let([{
    "accountRef": Select([0], Paginate(Match(Index("accounts_by_email"), Var("email"))))
  }, {
    "invalidate": Let([{
      "resetRequests": Paginate(Match(Index("password_reset_requests_by_account"), Var("accountRef")))
    }, {
      "resetTokenMatches": Map(Var("resetRequests"), Lambda(["request"], Match(Index("tokens_by_instance"), Var("request"))))
    }], Do(Map(Var("resetTokenMatches"), Lambda(["tokenMatch"], If(Exists(Var("tokenMatch")), Delete(Select(["ref"], Get(Var("tokenMatch")))), true))), Map(Var("resetRequests"), Lambda(["resetRequestRef"], Delete(Var("resetRequestRef"))))))
  }], Let([{
    "reset_request": Create(Collection("password_reset_request"), {
      "data": {
        "account": Var("accountRef")
      }
    })
  }], Create(Tokens(), {
    "instance": Select(["ref"], Var("reset_request")),
    "ttl": TimeAdd(Now(), 1800, "seconds")
  }))), {
    "code": "ACCOUNT_NOT_FOUND",
    "message": "The account was not found"
  }))),
  "role": "server"
})