Update(Function("login"), {
  "body": Query(Lambda(["email", "password"], Do(Call("call_limit", ["failed_login", Var("email"), Call("get_config_var", {
    "path": ["call_limits", "max_failed_logins"]
  })]), Let([{
    "loginResult": If(Exists(Match(Index("accounts_by_email"), Var("email"))), If(Identify(Select(["ref"], Get(Match(Index("accounts_by_email"), Var("email")))), Var("password")), Let([{
      "account": Get(Match(Index("accounts_by_email"), Var("email")))
    }, {
      "accountRef": Select(["ref"], Var("account"))
    }, {
      "tokens": Let([{
        "refresh": Create(Tokens(), {
          "instance": Var("accountRef"),
          "data": {
            "type": "refresh",
            "used": false,
            "sessionId": If(And(HasCurrentToken(), Equals(Select(["data", "type"], Get(CurrentToken()), false), "refresh")), Select(["data", "sessionId"], Get(CurrentToken())), NewId()),
            "validUntil": TimeAdd(Now(), 28800, "seconds"),
            "loggedOut": false
          },
          "ttl": TimeAdd(Now(), 604800, "seconds")
        })
      }, {
        "access": Create(Tokens(), {
          "instance": Var("accountRef"),
          "data": {
            "type": "access",
            "refresh": Select(["ref"], Var("refresh"))
          },
          "ttl": TimeAdd(Now(), 600, "seconds")
        })
      }], {
        "refresh": Var("refresh"),
        "access": Var("access")
      })
    }], {
      "tokens": Var("tokens"),
      "account": Var("account")
    }), false), false)
  }], If(Equals(Var("loginResult"), false), false, Do(Call("reset_logs", ["failed_login", Var("email")]), Var("loginResult"))))))),
  "role": "admin",
  "data": null
})